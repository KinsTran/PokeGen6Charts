too.expensive <- FALSE
# Create a variable `max.puppies`, which is the nuber of puppies you can afford for $1K.
max.puppies <- 0
puppy.price <- 2000
total.cost <- 0
too.expensive <- FALSE
max.puppies <- 0
hometown <- "Newcastle"
my.name <- "Kinsley"
my.height <- "5 foot 9"
puppies <- 0
puppy.price <- 2000
total.cost <- 0
too.expensive <- FALSE
max.puppies <- 0
AddThree <- function(a) {
return(a + 3)
}
AddThree(4)
ten <- AddThree(7)
AddThree(4)
ten <- AddThree(7)
AddThree <- function(a) {
return(a + 3)
}
AddThree(4)
ten <- AddThree(7)
FeetToMeters <- function(feet) {
return (feet * 0.3)
}
height.in.feet <- 5.9
height.in.meters <- FeetToMeters(height.in.feet)
install.packages("stringr")
library(stringr)
install.packages("stringr")
library(stringr)
my.age <- 19
my.name <- "Kinsley"
minutes.in.a.day <- 60 * 24
hours.in.a.year <- 24 * 365
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
my.intro <- MakeIntroduction(my.name, my.age)
loud.intro <- toupper(my.intro)
quiet.intro <- tolower(my.intro)
capitalized <- str_to_title(my.intro)
occurrences <- str_count(my.intro, "e")
?substr
casual.intro <- substr("Hey, I'm", "1", "18")
casual.intro <- substr(my.intro, "1", "18") <- "Hey, I'm"
my.intro <- MakeIntroduction(my.name, my.age)
?paste
casual.intro <- paste("Hey, I'm", substr(my.intro, 18))
substr
?substr
casual.intro <- paste("Hey, I'm", substring(my.intro, 18))
casual.intro
casual.intro <- paste("Hey, I'm", substring(my.intro, 20))
casual.intro
casual.intro <- paste("Hey, I'm", substring(my.intro, 29))
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
casual.intro
Double <- function(var) {
return(var * 2)
}
minutes.in.two.days <- Double(minutes.in.a.day)
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
loud.intro <- toupper(my.intro)
capitalized <- str_to_title(my.intro)
quiet.intro <- tolower(my.intro)
occurrences <- str_count(my.intro, "e")
Double <- function(var) {
return(var * 2)
}
minutes.in.two.days <- Double(minutes.in.a.day)
ThirdPower <- function(value) {}
ThirdPower <- function(value) {
return(value * value * value)
}
twenty.seven <- ThirdPower(3)
movies <- c("Toy Story", "Kimi no Na Wa", "Inside Out", "The Avengers", "The Incredibles", "Aladdin")
top.three <- movies[1:3]
excited <- paste(movies, "is a great movie!")
excited
without.four <- movies[1:3, 5:6]
without.four <- movies[1, 2, 3, 5, 6]
without.four <- movies[c(1:3, 5:6)]
without.four
without.four <- movies[c(1, 2, 3, 5, 6)]
without.four
without.four <- movies[c(1:3, 5:6)]
numbers <- c(700:999)
len <- length(numbers)
mean <- mean(numbers)
median <- median(numbers)
lower.numbers <- numbers(1:199)
lower.numbers <- numbers[1:200]
lower.numbers[200]
lower.numbers <- c(500:699)
all.numbers <- lower.numbers + numbers
all.numbers <- c(lower.numbers, numbers)
?as.Date
today <- as.Date(Sys.Date)
today <- as.Date(Sys.Date())
today <- Sys.Date()
today <- Sys.Date()
today <- as.Date(Sys.Date)
today <- as.Date(Sys.Date())
summer.break <- as.Date("June 9, 2017")
summer.break <- as.Date("6/9/2017")
summer.break <- as.Date("2017/6/9")
days.to.break <- summer.break - today
days.to.break <- (summer.break - today)
days.to.break <- (today - summer.break)
today
summer.break
summer.break - today
days.to.break <- (summer.break - today)
days.to.break <- summer.break - today
days.to.break
days.to.break - 5
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste(intro, "In", days, "I'll be", age + 1))
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
return(paste(intro, "In", days, "days I'll be", age + 1))
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste(intro, "In", days, "days I'll be", age + 1))
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
my.age <- 20
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
?paste0
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste0(intro, ". In ", days, " days I'll be ", age + 1))
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste(intro, ". In ", days, " days I'll be ", age + 1))
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste0(intro, ". In ", days, " days I'll be ", age + 1))
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
my.bday.intro
?stringr
?str_detect()
?str_replace_all
RemoveDigits <- function(strings) {
str_replace_all(strings, "1", "")
}
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
proof
RemoveDigits <- function(strings) {
str_replace_all(strings, "1", "")
str_replace_all(strings, "2", "")
str_replace_all(strings, "3", "")
str_replace_all(strings, "4", "")
str_replace_all(strings, "5", "")
str_replace_all(strings, "6", "")
str_replace_all(strings, "7", "")
str_replace_all(strings, "8", "")
str_replace_all(strings, "9", "")
str_replace_all(strings, "0", "")
}
RemoveDigits <- function(strings) {
str_replace_all(strings, c("1", "2", "3", "4", "5", "6", "7," "8", "9", "0"), "")
}
str_replace_all(strings, c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0"), "")
RemoveDigits <- function(strings) {
str_replace_all(strings, c("1", "2", "3", "4", "5", "6", "7", "8", "9", "0"), "")
}
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
RemoveDigits <- function(strings) {
str_replace_all(strings, "1", "")
str_replace_all(strings, "2", "")
str_replace_all(strings, "3", "")
str_replace_all(strings, "4", "")
str_replace_all(strings, "5", "")
str_replace_all(strings, "6", "")
str_replace_all(strings, "7", "")
str_replace_all(strings, "8", "")
str_replace_all(strings, "9", "")
str_replace_all(strings, "0", "")
}
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
proof
RemoveDigits <- function(strings) {
temp <- strings
temp <- str_replace_all(temp, "1", "")
temp <- str_replace_all(temp, "2", "")
temp <- str_replace_all(temp, "3", "")
temp <- str_replace_all(temp, "4", "")
temp <- str_replace_all(temp, "5", "")
temp <- str_replace_all(temp, "6", "")
temp <- str_replace_all(temp, "7", "")
temp <- str_replace_all(temp, "8", "")
temp <- str_replace_all(temp, "9", "")
temp <- str_replace_all(temp, "0", "")
}
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
proof
# a2-foundational-skills
# Set up and Defining variables -----------------------------------------------------------------
# Install and load the the `stringr` package, which has a variety of built in functions that make working with string variables easier.
install.packages("stringr")
library(stringr)
# Create a numeric variable `my.age` that is equal to your age
my.age <- 20
# Create a variable `my.name` that is equal to your first name
my.name <- "Kinsley"
# Using multiplication, create a variable `minutes.in.a.day` that is equal to the number of minutes in a day
minutes.in.a.day <- 60 * 24
# Using multiplication, create a variable `hours.in.a.year` that is the number of hours in a year
hours.in.a.year <- 24 * 365
# Create a variable `more.minutes.than.hours` that is a boolean value (TRUE/FALSE)
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
# Working with functions ----------------------------------------------------------
# Write a function called `MakeIntroduction` that takes in two arguments: name, and age.
# This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
# Create a variable `my.intro` by passing your variables `my.name` and `my.age` into your `MakeIntroduction` function
my.intro <- MakeIntroduction(my.name, my.age)
# Create a variable `casual.intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my.intro` variable
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
# Create a new variable `loud.intro`, which is your `my.intro` variable in all upper-case letters
loud.intro <- toupper(my.intro)
# Create a new variable `quiet.intro`, which is your `my.intro` variable in all lower-case letters
quiet.intro <- tolower(my.intro)
# Create a new variable capitalized, which is your `my.intro` variable with each word capitalized
# hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my.intro)
# Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e" appears in `my.intro`
occurrences <- str_count(my.intro, "e")
# Write another function `Double` that takes in a variable and returns that variable times two
Double <- function(var) {
return(var * 2)
}
# Using your `Double` function, create a variable `minutes.in.two.days`, which is the number of minutes in two days
minutes.in.two.days <- Double(minutes.in.a.day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(value) {
return(value * value * value)
}
# Create a variable `twenty.seven`` by passing the number 3 to your `ThirdPower` function
twenty.seven <- ThirdPower(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Toy Story", "Kimi no Na Wa", "Inside Out", "The Avengers", "The Incredibles", "Aladdin")
# Create a vector `top.three` that only contains the first three movies in the vector
top.three <- movies[1:3]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
# Create a vector `without.four` that has your first three movies, and your 5th and 6th movies.
without.four <- movies[c(1:3, 5:6)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in length function, create a variable `len` that is equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers.mean` that is the mean of your vector `numbers`
mean <- mean(numbers)
# Using the `median` function, create a variable `numbers.median` that is the mean of your vector `numbers`
median <- median(numbers)
# Create a vector `lower.numbers` that is the numbers 500:699
lower.numbers <- c(500:699)
# Create a vector `all.numbers` that combines your `lower.numbers` and `numbers` vectors
all.numbers <- c(lower.numbers, numbers)
# Dates ----------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `summer.break` that represents the first day of Summer break (June 9, 2017).
# Make sure to use the `as.Date` function again
summer.break <- as.Date("2017/6/9")
# Create a variable `days.to.break` that is how many days until break (hint: subtract the dates!)
days.to.break <- summer.break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for an upcoming birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new.age}"
# You should utilize your `MakeIntroduction()` function from Part 1!
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste0(intro, ". In ", days, " days I'll be ", age + 1))
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
# Challenge ------------------------------------------------------------------
# Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a *vector of strings*.
RemoveDigits <- function(strings) {
temp <- strings
temp <- str_replace_all(temp, "1", "")
temp <- str_replace_all(temp, "2", "")
temp <- str_replace_all(temp, "3", "")
temp <- str_replace_all(temp, "4", "")
temp <- str_replace_all(temp, "5", "")
temp <- str_replace_all(temp, "6", "")
temp <- str_replace_all(temp, "7", "")
temp <- str_replace_all(temp, "8", "")
temp <- str_replace_all(temp, "9", "")
temp <- str_replace_all(temp, "0", "")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
# a2-foundational-skills
# Set up and Defining variables -----------------------------------------------------------------
# Install and load the the `stringr` package, which has a variety of built in functions that make working with string variables easier.
#install.packages("stringr")
library(stringr)
# Create a numeric variable `my.age` that is equal to your age
my.age <- 20
# Create a variable `my.name` that is equal to your first name
my.name <- "Kinsley"
# Using multiplication, create a variable `minutes.in.a.day` that is equal to the number of minutes in a day
minutes.in.a.day <- 60 * 24
# Using multiplication, create a variable `hours.in.a.year` that is the number of hours in a year
hours.in.a.year <- 24 * 365
# Create a variable `more.minutes.than.hours` that is a boolean value (TRUE/FALSE)
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
# Working with functions ----------------------------------------------------------
# Write a function called `MakeIntroduction` that takes in two arguments: name, and age.
# This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
# Create a variable `my.intro` by passing your variables `my.name` and `my.age` into your `MakeIntroduction` function
my.intro <- MakeIntroduction(my.name, my.age)
# Create a variable `casual.intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my.intro` variable
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
# Create a new variable `loud.intro`, which is your `my.intro` variable in all upper-case letters
loud.intro <- toupper(my.intro)
# Create a new variable `quiet.intro`, which is your `my.intro` variable in all lower-case letters
quiet.intro <- tolower(my.intro)
# Create a new variable capitalized, which is your `my.intro` variable with each word capitalized
# hint: use the stringr function `str_to_title`
capitalized <- str_to_title(my.intro)
# Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e" appears in `my.intro`
occurrences <- str_count(my.intro, "e")
# Write another function `Double` that takes in a variable and returns that variable times two
Double <- function(var) {
return(var * 2)
}
# Using your `Double` function, create a variable `minutes.in.two.days`, which is the number of minutes in two days
minutes.in.two.days <- Double(minutes.in.a.day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower <- function(value) {
return(value * value * value)
}
# Create a variable `twenty.seven`` by passing the number 3 to your `ThirdPower` function
twenty.seven <- ThirdPower(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Toy Story", "Kimi no Na Wa", "Inside Out", "The Avengers", "The Incredibles", "Aladdin")
# Create a vector `top.three` that only contains the first three movies in the vector
top.three <- movies[1:3]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited <- paste(movies, "is a great movie!")
# Create a vector `without.four` that has your first three movies, and your 5th and 6th movies.
without.four <- movies[c(1:3, 5:6)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- c(700:999)
# Using the built in length function, create a variable `len` that is equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean` function, create a variable `numbers.mean` that is the mean of your vector `numbers`
mean <- mean(numbers)
# Using the `median` function, create a variable `numbers.median` that is the mean of your vector `numbers`
median <- median(numbers)
# Create a vector `lower.numbers` that is the numbers 500:699
lower.numbers <- c(500:699)
# Create a vector `all.numbers` that combines your `lower.numbers` and `numbers` vectors
all.numbers <- c(lower.numbers, numbers)
# Dates ----------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today <- as.Date(Sys.Date())
# Create a variable `summer.break` that represents the first day of Summer break (June 9, 2017).
# Make sure to use the `as.Date` function again
summer.break <- as.Date("2017/6/9")
# Create a variable `days.to.break` that is how many days until break (hint: subtract the dates!)
days.to.break <- summer.break - today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for an upcoming birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new.age}"
# You should utilize your `MakeIntroduction()` function from Part 1!
MakeBirthdayIntro <- function(name, age, birthday) {
intro <- MakeIntroduction(name, age)
days <- as.Date(birthday) - as.Date(Sys.Date())
return(paste0(intro, ". In ", days, " days I'll be ", age + 1))
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, "2017/5/21")
# Challenge ------------------------------------------------------------------
# Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a *vector of strings*.
RemoveDigits <- function(strings) {
temp <- strings
temp <- str_replace_all(temp, "1", "")
temp <- str_replace_all(temp, "2", "")
temp <- str_replace_all(temp, "3", "")
temp <- str_replace_all(temp, "4", "")
temp <- str_replace_all(temp, "5", "")
temp <- str_replace_all(temp, "6", "")
temp <- str_replace_all(temp, "7", "")
temp <- str_replace_all(temp, "8", "")
temp <- str_replace_all(temp, "9", "")
temp <- str_replace_all(temp, "0", "")
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
proof <- RemoveDigits(c("INFO 201", "CSE 142", "INFO474", "INFO445"))
load("D:/Info201/.RData")
setwd("D:/Info201")
setwd("D:/Info201")
load("D:/Info201/.RData")
library(stringr)
my.intro <- MakeIntroduction(my.name, my.age)
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
my.intro <- MakeIntroduction(my.name, my.age)
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
my.age <- 20
my.name <- "Kinsley"
minutes.in.a.day <- 60 * 24
hours.in.a.year <- 24 * 365
more.minutes.than.hours <- minutes.in.a.day > hours.in.a.year
my.intro <- MakeIntroduction(my.name, my.age)
MakeIntroduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old")
}
casual.intro <- paste("Hey, I'm", substring(my.intro, 19))
loud.intro <- toupper(my.intro)
install.packages("httr")
install.packages("jsonlite")
library(dplyr)
setwd("D:/Info474/PokeGen6Charts")
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
View(pokemon)
View(pokemon.types)
View(types)
setwd("D:/Info474/PokeGen6Charts")
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
pokemon <- left_join(pokemon, pokemon.types)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
pokemon <- left_join(pokemon, pokemon.types)
pokemon <- left_join(pokemon, types)
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
pokemon <- left_join(pokemon, pokemon.types)
pokemon <- left_join(pokemon, types)
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
types <- select(type_id, identifier)
types <- select(types, type_id, identifier)
pokemon <- left_join(pokemon, types)
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
pokemon.types <- read.csv("data/pokemon_types.csv", stringsAsFactors = FALSE)
types <- read.csv("data/types.csv", stringsAsFactors = FALSE)
types <- select(types, type_id, identifier)
types <- select(types, type_id, type_name)
pokemon <- left_join(pokemon, pokemon.types)
pokemon <- left_join(pokemon, types, by = "")
pokemon <- left_join(pokemon, types, by = "")
pokemon <- left_join(pokemon, types)
write.csv(pokemon, "data/consolidated_pokemon_types.csv")
write.csv(pokemon, "data/consolidated_pokemon_types.csv")
write.csv(pokemon, "data/consolidated_pokemon_types.csv", stringsAsFactors = FALSE)
write.csv(pokemon, "data/consolidated_pokemon_types.csv")
write.csv(pokemon, "data/consolidated_pokemon_types.csv", col.names = NA)
write.csv(pokemon, "data/consolidated_pokemon_types.csv", col.names = NA)
write.csv(pokemon, "data/consolidated_pokemon_types.csv")
